DROP PROCEDURE IF EXISTS tps1.proc_hotel_filter1;
CREATE DEFINER=`tps`@`localhost` PROCEDURE `proc_hotel_filter1`(in_search_value   VARCHAR(500),
                                                               in_check_in_date  VARCHAR(100),
                                                               in_check_out_date VARCHAR(100),
                                                               in_no_of_rooms    INT,
                                                               in_no_of_adult    INT,
                                                               in_no_of_child    INT,
                                                               in_child_ages     VARCHAR(500),
                                                               in_activities     VARCHAR(1000),
                                                               in_amenities      VARCHAR(1000),
                                                               in_from_price     FLOAT,
                                                               in_to_price       FLOAT,
                                                               in_type VARCHAR(50) ,
                                                               in_sorting_type VARCHAR(50),
                                                               in_star_range VARCHAR(50),
                                                               in_page_no INT,
                                                               in_off_set int
)
BEGIN

    DECLARE lv_room_detail_id INT;
    DECLARE lv_no_of_guest INT;
    DECLARE lv_rate FLOAT;
    DECLARE lv_extra_adult INT;
    DECLARE lv_extra_child INT;
    DECLARE lv_child_age_max INT;
    DECLARE lv_child_rate INT;
    DECLARE lv_adult_rate INT;

    DECLARE lv_actual_adult INTEGER;
    DECLARE lv_actual_child INTEGER;


    DECLARE lv_total_guest INT;


    -- *****************testing************
    set @total_days=datediff(in_check_out_date, in_check_in_date);


    CALL proc_convert_array(in_child_ages);

    DROP TEMPORARY TABLE if EXISTS temp_listed;

    SET @test_query=concat('
    CREATE  TEMPORARY TABLE if NOT EXISTS temp_listed
    SELECT (@row_number:=@row_number + 1) AS row_count,
         a.room_detail_id,
         a.hotel_detail_id,
         c.hotel_name,
         c.address_id,
         c.star_rating,
         c.lat,
         c.lng,
         a.rooms_provided,
         (a.rooms_provided - ifnull(f.count, 0)) rem_room,
         a.no_of_guest,
         @total_days total_days,
         a.rate,
      --   a.min_no_of_guest,
       --  a.discount,
      --   a.discount_type,
         a.extra_adult,
         a.extra_child,
         h.child_age_max,
         h.child_rate,
         h.adult_rate
       FROM room_detail a JOIN room_type b ON (a.room_type_id = b.room_type_id)
         JOIN hotel_detail c ON (a.hotel_detail_id = c.hotel_detail_id)
       --  JOIN region d ON (c.region_id = d.region_id)
       --  JOIN country e ON (d.country_id = e.country_id)
         JOIN extra_bed h ON (a.hotel_detail_id = h.hotel_detail_id)
         JOIN address i on (c.address_id=i.address_id)
        LEFT JOIN (SELECT
                      sum(no_of_rooms) count,
                      room_detail_id
                    FROM hotel_booking
                    WHERE (''',in_check_in_date,''' BETWEEN check_in_date AND check_out_date
                           OR ''',in_check_out_date,''' BETWEEN check_in_date AND check_out_date
                           OR check_in_date BETWEEN ''',in_check_in_date,''' AND ''',in_check_out_date,'''
                           OR check_out_date BETWEEN ''',in_check_in_date,''' AND ''',in_check_out_date,''') AND cancel_status <> ''Y'' AND cancel_status <> ''Y'' AND reserve_type IN (''B'',''P'')
                    GROUP BY room_detail_id) f ON (f.room_detail_id = a.room_detail_id)');


    IF (in_activities IS NOT NULL ) THEN
      set @test_query=concat(@test_query,' JOIN (SELECT hotel_detail_id, group_concat(activity_id ORDER by activity_id )   from hotel_activity WHERE
                                    deleted_flag<>''Y'' AND  active=''Y'' AND activity_id IN (',in_activities,')  GROUP BY  hotel_detail_id
                                  HAVING group_concat(activity_id ORDER by activity_id )=(SELECT group_concat(activity_id)
                                    from activity WHERE activity_id IN (',in_activities,') AND deleted_flag<>''Y'' and parent_activity_id IS NOT NULL)) i ON
                                    i.hotel_detail_id=a.hotel_detail_id');
    END IF;


    IF (in_amenities IS NOT NULL ) THEN

      set @test_query=concat(@test_query,' JOIN (SELECT room_detail_id, group_concat(amenity_id ORDER by amenity_id)
                                      from room_amenity WHERE amenity_id in (',in_amenities,') AND  deleted_flag<>''Y'' AND  active=''Y''
                                      GROUP BY  room_detail_id
                                      HAVING group_concat(amenity_id ORDER by amenity_id)=(SELECT group_concat(amenity_id ORDER by amenity_id) from amenity
                                      WHERE amenity_id in (',in_amenities,') and
                                            deleted_flag<>''Y'' and parent_amenity_id is not NULL)) j ON a.room_detail_id=j.room_detail_id');

    END IF;

    set @test_query =concat(@test_query, ',(SELECT @row_number:=0) AS t');

    set in_search_value=ifnull(in_search_value,'');

    set @test_query=concat(@test_query,'  WHERE a.deleted_flag <> ''Y'' AND  ');


    if (length(trim(in_search_value))<>0  ) THEN  -- enable if in_search_value is  blank or null

      if (in_type='H') THEN   -- hotel wise check
        set @test_query=concat(@test_query,' a.hotel_detail_id=',in_search_value,' AND ');
      ELSEIF (in_type='A') THEN  -- area wise check
        set @test_query=concat(@test_query,'  i.address_id in (',in_search_value,') AND     ');
      END IF;

    END IF;

    set @test_query=concat(@test_query, '    (a.rooms_provided - ifnull(f.count, 0)) >= ',in_no_of_rooms,' AND c.active = ''Y''
                                AND  ''',in_check_in_date,''' > now() AND ''',in_check_out_date,''' > now()');



    -- SELECT @test_query;


    PREPARE stmt FROM @test_query;
    EXECUTE stmt;

    ALTER TABLE temp_listed
    ADD actual_adult   INT,
    ADD  actual_child   INT,
    ADD  total_guest    INT,
    ADD eff_child      INT,
    ADD eff_adult      INT,
    ADD offer_id      INT,
    ADD actual_rate     FLOAT,
    ADD final_rate     FLOAT;

    set @count=0;

    SELECT count(*) into @count from temp_listed;

    set @counter=1;
    set @selected=FALSE;

    WHILE (@counter<=@count) DO

      SELECT room_detail_id, no_of_guest,rate,extra_adult,extra_child,child_age_max,child_rate,adult_rate
      into lv_room_detail_id, lv_no_of_guest,lv_rate,lv_extra_adult,lv_extra_child,lv_child_age_max,lv_child_rate,lv_adult_rate
      FROM temp_listed WHERE row_count=@counter;
      -- ***************************

      SELECT count(*)  INTO lv_actual_child  FROM array_table   WHERE value <= lv_child_age_max;

      SELECT count(*) + in_no_of_adult  INTO lv_actual_adult  FROM array_table WHERE value > lv_child_age_max;

      SET lv_total_guest = lv_actual_adult + lv_actual_child;


      IF (lv_total_guest <= (lv_no_of_guest * in_no_of_rooms))
      THEN
        --  SELECT 'test1';
        SET @actual_rate = (lv_rate * in_no_of_rooms)*@total_days;

        --    actual_adult,actual_child,total_guest,eff_child,eff_adult,final_rate

        SET SQL_SAFE_UPDATES=0;
        UPDATE temp_listed set actual_adult=lv_actual_adult,
          actual_child=lv_actual_child,
          total_guest=lv_total_guest,
          eff_child=0,
          eff_adult=0,
          actual_rate=@actual_rate
        WHERE row_count=@counter;
        SET SQL_SAFE_UPDATES=1;

        set @selected=TRUE ;
      /*      INSERT INTO temp_room_det
            VALUES (lv_room_detail_id, lv_no_of_guest, lv_actual_adult, lv_actual_child, lv_total_guest, 0, 0, @actual_rate);
      */
      ELSEIF (lv_actual_adult < (lv_no_of_guest * in_no_of_rooms))
        THEN
          --  SELECT 'test2';
          SET @rem_guest = lv_no_of_guest * in_no_of_rooms - lv_actual_adult;

          SET @eff_child = lv_actual_child - @rem_guest;

          IF (@eff_child <= lv_extra_child * in_no_of_rooms)
          THEN
            SET @actual_rate = (lv_rate * in_no_of_rooms + lv_child_rate * @eff_child)*@total_days;

            SET SQL_SAFE_UPDATES=0;
            UPDATE temp_listed set actual_adult=lv_actual_adult,
              actual_child=lv_actual_child,
              total_guest=lv_total_guest,
              eff_child=@eff_child,
              eff_adult=0,
              actual_rate=@actual_rate
            WHERE row_count=@counter;
            SET SQL_SAFE_UPDATES=1;

            set @selected=TRUE ;

          /* INSERT INTO temp_room_det VALUES
             (lv_room_detail_id, lv_no_of_guest, lv_actual_adult, lv_actual_child, lv_total_guest, @eff_child, 0,
              @actual_rate);*/
          END IF;

      ELSEIF (lv_actual_adult = lv_no_of_guest * in_no_of_rooms)
        THEN
          --  SELECT 'test3',lv_actual_adult,lv_actual_child,lv_extra_child,lv_rate,lv_child_rate,lv_room_detail_id;
          IF (lv_actual_child <= lv_extra_child * in_no_of_rooms)
          THEN
            SET @actual_rate =( (lv_rate * in_no_of_rooms) + (lv_child_rate * lv_actual_child))*@total_days;

            SET SQL_SAFE_UPDATES=0;
            UPDATE temp_listed set actual_adult=lv_actual_adult,
              actual_child=lv_actual_child,
              total_guest=lv_total_guest,
              eff_child=lv_actual_child,
              eff_adult=0,
              actual_rate=@actual_rate
            WHERE row_count=@counter;
            SET SQL_SAFE_UPDATES=1;

            set @selected=TRUE ;

          /* INSERT INTO temp_room_det VALUES
             (lv_room_detail_id, lv_no_of_guest, lv_actual_adult, lv_actual_child, lv_total_guest, lv_actual_child, 0,
              @actual_rate);*/
          END IF;

      ELSEIF (lv_actual_adult > lv_no_of_guest * in_no_of_rooms)
        THEN
          --   SELECT 'test4';
          SET @eff_adult = lv_actual_adult - lv_no_of_guest * in_no_of_rooms;

          IF (@eff_adult <= lv_extra_adult * in_no_of_rooms AND lv_actual_child <= lv_extra_child * in_no_of_rooms)
          THEN
            SET @actual_rate =( lv_rate * in_no_of_rooms + lv_child_rate * lv_actual_child + lv_adult_rate * @eff_adult)*@total_days;

            SET SQL_SAFE_UPDATES=0;
            UPDATE temp_listed set actual_adult=lv_actual_adult,
              actual_child=lv_actual_child,
              total_guest=lv_total_guest,
              eff_child=lv_actual_child,
              eff_adult=@eff_adult,
              actual_rate=@actual_rate
            WHERE row_count=@counter;
            SET SQL_SAFE_UPDATES=1;

            set @selected=TRUE ;

          /*  INSERT INTO temp_room_det VALUES
              (lv_room_detail_id, lv_no_of_guest, lv_actual_adult, lv_actual_child, lv_total_guest, lv_actual_child,
               @eff_adult, @actual_rate);*/
          END IF;

      END IF;

      set @offer_id=NULL ;
      set @offer_type=NULL ;
      set  @offer_amount=NULL ;

      if (@selected=TRUE ) THEN

        -- for offer
        SELECT offer_id,offer_type,offer_amount INTO @offer_id,@offer_type,@offer_amount  from offer
        WHERE room_detail_id=lv_room_detail_id and
              in_check_in_date BETWEEN effective_from and effective_to AND
              in_check_out_date BETWEEN effective_from and effective_to AND
              deleted_flag<>'Y';


        IF (@offer_type='PERCENTAGE') THEN
          set @final_amount= @actual_rate-(@offer_amount/100)*@actual_rate;

        ELSEIF (@offer_type='FLAT') THEN
          set @final_amount= @actual_rate-@offer_amount*@total_days;

        ELSE
          set @final_amount=@actual_rate;

        END IF;

        SET SQL_SAFE_UPDATES=0;
        UPDATE temp_listed set final_rate=round(@final_amount),
          offer_id=@offer_id
        WHERE row_count=@counter;
        SET SQL_SAFE_UPDATES=1;

      -- for offer
      END IF;

      -- *******************
      set @counter=@counter+1;
      set @selected=FALSE;
    END WHILE;

    -- SELECT  * from temp_listed WHERE final_rate is not null and final_rate BETWEEN ifnull(in_from_price,0) and ifnull(in_to_price,'9999999999999999') ;

    SET in_from_price=ifnull(in_from_price,0);
    set in_to_price =ifnull(in_to_price,9999999999999999);

  SET @query1='';
  
    set @query1=concat('SELECT  min(a.final_rate),a.*  from temp_listed a WHERE final_rate is not null and final_rate BETWEEN ',in_from_price,' and ',in_to_price);


    if (in_star_range is NOT  NULL ) THEN
      SET @query1=concat(@query1,' AND star_rating in (',in_star_range,') ');
    END IF;

    SET @query1=concat(@query1,' GROUP BY  hotel_detail_id ');

  -- ** price, star asc and desc filter
    if (in_sorting_type='PRICE_ASC') THEN
      SET @query1=concat(@query1,' ORDER BY final_rate ASC ');

    ELSEIF (in_sorting_type='PRICE_DESC') THEN
      SET @query1=concat(@query1,' ORDER BY final_rate DESC ');

    ELSEIF (in_sorting_type='STAR_ASC') THEN
      SET @query1=concat(@query1,' ORDER BY star_rating ASC ');

    ELSEIF (in_sorting_type='STAR_DESC') THEN
      SET @query1=concat(@query1,' ORDER BY star_rating DESC ');

    END IF;
  
  -- **

  -- ** pagination handling 
    set @query2='';  
    if (in_page_no is NOT NULL  AND in_off_set is NOT  NULL ) THEN
      SET @query2=concat(@query1,' LIMIT ',(in_page_no-1)*in_off_set,',',in_off_set);
      
      ELSE 
      set @query2=@query1;
    END IF;
  
  -- **

    --   SELECT  @query1;


    PREPARE stmt FROM @query2;
    EXECUTE stmt;
  
  -- total count of data after applying filter (notice: data without pagination)
    set @query1=concat('select count(*) total_hotels from (',@query1,') a');

  -- **
  
  PREPARE stmt FROM @query1;
  EXECUTE stmt;

  END;